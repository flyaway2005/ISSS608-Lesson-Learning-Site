---
title: "Take-home Exercise 2"
author: "Chang Fang Yu"
date-modified: "last-modified"
execute:
  echo: False
  eval: True
  warning: false
  freeze: true
---

# Data Visualization Optimization - Singapore's International Trade

In this exercise, I choose 3 infographics to enhance the visualization for better clarity and understanding from Singapore Department of Statistics. (n.d.). *Singapore international trade*. Retrieved from <https://www.singstat.gov.sg/modules/infographics/singapore-international-trade>. The data source is from Singstat, specifically Merchandise Trade by Commodity Section/Division and Merchandise Trade by Region/Market. Besides, I will introduce time series analyse on the same data set to aquire more insights. \## Part 1. Infograpic Make-OVer

### Topic 1: [TOTAL MERCHANDISE TRADE AT CURRENT PRICES, 2020 - 2024](https://www.singstat.gov.sg/modules/infographics/singapore-international-trade)

![TOTAL MERCHANDISE TRADE AT CURRENT PRICES, 2020 - 2024](images/01.png)

The advantages of the infographic:

1.  The graph's visual design aligns with the trade theme.
2.  The distinct colors helps differentiate different different year quickly.
3.  The data labels is concise and the inclusion of numeric values enhances readability.

Areas for improvement of the infographic:

1.  Users can't explore specific data point due to limited interactivity.
2.  The trend on total trade value is not clear shown.

### Load the R packages and import data

The dataset for this topic include 3 table:

-   Merchandise Trade By Region And Selected Market (Imports), Monthly:\
    named as "import_m" in the following analysis

-   Merchandise Trade By Region And Selected Market (Domestic Exports), Monthly: named as "export_m"

-   Merchandise Trade By Region And Selected Market (Re-Exports), Monthly: named as "re_export_m"

```{r}
pacman::p_load(plotly, dplyr, scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse, CGPfunctions, tsibble, feasts, fable, seasonal)
```

```{r}
import_m <- read_excel("data/trade.xlsx", sheet = "T1", skip = 10)
export_m <- read_excel("data/trade.xlsx", sheet = "T2", skip = 10)
re_export_m <- read_excel("data/trade.xlsx", sheet = "T3", skip = 10)

```

### Data Set for Topic 1, 2

::: panel-tabset
### Import(Merchandise)

```{r}

kable(head(import_m))
```

### Export(Merchandise)

```{R}
kable(head(export_m))
```

### Re-Export(Merchandise)

```{r}
kable(head(re_export_m))

```
:::

### Data pre-processing

The original infographic represents "Export" as a combination of both export and re-export from the raw dataset. Therefore, in this step, we combine these two datasets to calculate Total Export, ensuring consistency with the original representation. Additionally, we derive the Month and Year columns for further analysis.

```{r}
#import(merchandise)

import_m_long <- import_m %>%
    pivot_longer(cols = -`Data Series`,  
                 names_to = "Month_Year", 
                 values_to = "Value") %>%
    mutate(
        Year = as.numeric(sub(" .*", "", Month_Year)),  
        Month = factor(sub("^[0-9]+ ", "", Month_Year), 
                       levels = month.abb,  
                       ordered = TRUE)
    ) %>%
    select(`Data Series`, Year, Month, Value)  

```

```{R}

#  Long Format
export_m_long <- export_m %>%
    pivot_longer(cols = -`Data Series`,
                 names_to = "Month_Year",
                 values_to = "Export_Value")

re_export_m_long <- re_export_m %>%
    pivot_longer(cols = -`Data Series`,
                 names_to = "Month_Year",
                 values_to = "Re_Export_Value")

# combine Export and Re-Export 
total_export_m <- left_join(export_m_long, re_export_m_long, 
                            by = c("Data Series", "Month_Year")) %>%
    mutate(Total_Export_Value = Export_Value + Re_Export_Value) %>%
    select(`Data Series`, Month_Year, Total_Export_Value)

# Derive Year and Month
total_export_m <- total_export_m %>%
    mutate(
        Year = as.numeric(sub(" .*", "", Month_Year)),
        Month = factor(sub("^[0-9]+ ", "", Month_Year), levels = month.abb, ordered = TRUE)
    ) %>%
    select(`Data Series`, Year, Month, Total_Export_Value)

```

### Interactive Plot

::: panel-tabset
### Plot 1

```{r}
#| ecoho: false


filtered_import <- import_m_long %>%
  filter(`Data Series` == "Total All Markets", Year >= 2020 & Year <= 2024)

filtered_export <- total_export_m %>%
  filter(`Data Series` == "Total All Markets", Year >= 2020 & Year <= 2024)


combined_data <- filtered_import %>%
  rename(Import_Value = Value) %>%
  left_join(filtered_export %>% rename(Total_Export_Value = Total_Export_Value), by = c("Year", "Month")) %>%
  mutate(
    Import_Value = Import_Value / 1000,                 
    Total_Export_Value = Total_Export_Value / 1000,   
    Total_trade = (Import_Value + Total_Export_Value),    
  ) %>%
  pivot_longer(cols = c(Import_Value, Total_Export_Value, Total_trade), names_to = "Type", values_to = "Value")


average_values <- combined_data %>%
  group_by(Type, Month) %>%
  summarise(AvgValue = mean(Value, na.rm = TRUE), .groups = "drop")


p <- ggplot(combined_data, aes(x = Year, y = Value, group = Type, color = Type)) +
  geom_line(size = 0.8) +  
  geom_point(size = 1) +  
  geom_hline(data = average_values, aes(yintercept = AvgValue), linetype = "dotted", size = 0.3) +  
  facet_wrap(~Month, nrow = 1) +  
  scale_color_manual(values = c("Import_Value" = "blue", "Total_Export_Value" = "green", "Total_trade" = "orange")) +  
  labs(title = "TOTAL MERCHANDISE TRADE(2020-2024)",
       x = "", 
       y = "Trade Value (in Billion SGD)") +  
  theme_minimal() +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
        strip.text = element_text(size = 10, face = "bold"),
        legend.position = "none")  

ggplotly(p)

```

### Plot 2

```{r}
#| ecoho: false

annual_total <- combined_data %>%
  group_by(Year, Type) %>%
  summarise(TotalValue = sum(Value, na.rm = TRUE), .groups = "drop")

p_annual <- ggplot(annual_total, aes(x = Year, y = TotalValue, group = Type, color = Type)) +
  geom_line(size = 1) +  
  geom_point(size = 1.2) +  
  scale_color_manual(values = c("Import_Value" = "blue", "Total_Export_Value" = "green", "Total_trade" = "orange")) +  
  labs(title = "Total Merchandise Trade Value (2020-2024)",
       x = "Year", 
       y = "Total Trade Value (in Billion SGD)") +  
  theme_minimal() +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        legend.position = "bottom")  

ggplotly(p_annual)

```
:::

## Topic 2: MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS, 2024

![MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS, 2024](images/02-01.png)

The advantages of the infographic:

1.  The chart effectively utilize different colors to label each country's merchandise trede value, making it clear to interpret
2.  The varying sizes of the circles visually illustrate the trade volume, allowing users to compare between different countries.
3.  The smart use of background color which differentiate trade surplus and deficit, providing an important layer of insight to the data.

Areas for improvement of the infographic:

1.  Lacking of interactivity.

```{r}
#| ecoho: false

import_2024 <- import_m %>%
  select(`Data Series`, contains("2024")) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Import_Value") %>%
  group_by(`Data Series`) %>%
  summarise(Import_Value = sum(Import_Value, na.rm = TRUE), .groups = "drop")

export_2024 <- export_m %>%
  select(`Data Series`, contains("2024")) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Export_Value") %>%
  group_by(`Data Series`) %>%
  summarise(Export_Value = sum(Export_Value, na.rm = TRUE), .groups = "drop")

re_export_2024 <- re_export_m %>%
  select(`Data Series`, contains("2024")) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Re_Export_Value") %>%
  group_by(`Data Series`) %>%
  summarise(Re_Export_Value = sum(Re_Export_Value, na.rm = TRUE), .groups = "drop")


trade_2024 <- import_2024 %>%
  left_join(export_2024, by = "Data Series") %>%
  left_join(re_export_2024, by = "Data Series") %>%
  mutate(
    Import_Value = Import_Value / 1000, 
    Export_Value = Export_Value / 1000,   
    Re_Export_Value = Re_Export_Value / 1000, 
    Total_Export_Value = (Export_Value + Re_Export_Value), 
    Total_Trade = (Import_Value + Total_Export_Value)
  ) %>%
  filter(!`Data Series` %in% c("Total All Markets", "Asia")) %>%
  arrange(desc(Total_Trade)) %>%  
  slice(1:12)


max_value <- max(trade_2024$Total_Export_Value, trade_2024$Import_Value, na.rm = TRUE)

p <- ggplot(trade_2024, aes(x = Total_Export_Value, y = Import_Value, size = Total_Trade, fill = `Data Series`)) +
  

  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  

  annotate("polygon", 
         x = c(0, max_value, 0), 
         y = c(0, max_value, max_value), 
         fill = "lightblue", alpha = 0.2) +

  geom_point(shape = 21, alpha = 0.8, color = "white") +
  scale_size(range = c(3, 15)) +

  labs(title = "Merchandise Trade Performance 
       with Top Trading Partners (2024)",
       x = "Exports (S$ Bil)",
       y = "Imports (S$ Bil)",
       size = "Total Trade (S$ Bil)",
       fill = "Country") +


  theme_minimal() +
  theme(legend.position = "bottom",
        plot.caption = element_text(hjust = 0, size = 8, face = "bold", color = "gray30"))

ggplotly(p, tooltip = c("x", "y", "size", "fill"))

```

## Topic 3: MAJOR TRADING PARTNERS FOR TRADE IN SERVICES, 2023

![MAJOR TRADING PARTNERS FOR TRADE IN SERVICES, 2023](images/03.png)

The advantages of the infographic:

Areas for improvement of the infographic:

### Data Set for Topic 3

::: panel-tabset
### Import(services)

```{R}
import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
kable(head(import_s))
```

### Export(services)

```{R}
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)
kable(head(export_s))
```
:::

### Create a top 10 trade partners list from 2023

```{r}

# 讀取數據
import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)

# 轉換數據格式 (long format) 並過濾2023年數據
import_long <- import_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Import_Value") %>%
  mutate(Year = as.integer(Year), 
         Import_Value = as.numeric(Import_Value)) %>%
  filter(Year == 2023 & !`Data Series` %in% c("Asia", "Europe", "North America", "Oceania", "South And Central America And The Caribbean", "America" ))

export_long <- export_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Export_Value") %>%
  mutate(Year = as.integer(Year), 
         Export_Value = as.numeric(Export_Value)) %>%
  filter(Year == 2023 & !`Data Series` %in% c("Asia", "Europe", "North America", "Oceania", "South And Central America And The Caribbean"  ))

# 合併 Import 和 Export 數據
trade_2023 <- import_long %>%
  full_join(export_long, by = "Data Series") %>%
  mutate(
    Import_Value = replace_na(Import_Value, 0),  # 若無數據則填補 0
    Export_Value = replace_na(Export_Value, 0),
    Total_Trade = Import_Value + Export_Value   # 計算總貿易額
  )

# 選出前十大貿易夥伴
top_10_partners_2023 <- trade_2023 %>%
  arrange(desc(Total_Trade)) %>%
  slice_head(n = 10) %>%
  pull(`Data Series`)

# 顯示前十名貿易夥伴
print(top_10_partners_2023)

```

### Plot slope graphs

Next, we will use the list of the top 10 trading partners in 2023 to create a slope graph comparing 2019 and 2023. The graph will be interactive, allowing users to hover over a country to display a tooltip showing the total trade, import, and export values for that year. This presentation will be more concise and clearer than the original infographic.

```{r}
#| ecoho: false

import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)

import_long <- import_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Import_Value") %>%
  mutate(Year = as.integer(Year),
         Import_Value = as.numeric(Import_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

export_long <- export_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Export_Value") %>%
  mutate(Year = as.integer(Year),
         Export_Value = as.numeric(Export_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

# Combine Import and Export 
trade_2023 <- import_long %>%
  left_join(export_long, by = c("Data Series", "Year")) %>%
  mutate(Total_Trade = Import_Value + Export_Value) %>%
  filter(`Data Series` %in% top_10_partners_2023) %>% 
  group_by(`Data Series`, Year) %>%
  summarise(
    Import_Value = round(sum(Import_Value, na.rm = TRUE) / 1000, 1),
    Export_Value = round(sum(Export_Value, na.rm = TRUE) / 1000, 1),
    Total_Trade = round(sum(Total_Trade, na.rm = TRUE) / 1000, 1), .groups = "drop"
  ) %>%  # 單位轉換為Billion
  ungroup() %>%
  mutate(Year = factor(Year, levels = c(2019, 2023))) # 設定年份順序

# Slope Graph
trade_plot <- ggplot(trade_2023, aes(x = Year, y = Total_Trade, group = `Data Series`, text = paste(
    "Country: ", `Data Series`, "<br>",
    "Total Trade: ", Total_Trade, "B SGD<br>",
    "Import: ", Import_Value, "B SGD<br>",
    "Export: ", Export_Value, "B SGD"
  ))) +
  geom_line(aes(color = `Data Series`), size = 0.9) +
  geom_point(aes(color = `Data Series`), size = 1.3) +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Top Trade Partners (2019 vs 2023)",
    subtitle = "Comparison of Top Trade Countries in 2023 (in Billion SGD)",
    caption = "Data Source: Imports and Exports of Services by Major Trading Partner",
    x = NULL, y = "Total Trade (Billion SGD)"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

trade_plotly <- ggplotly(trade_plot, tooltip = "text")

trade_plotly


```

If we use a static design for the slope graph, we would need three separate charts to compare total trade, export, and import between 2019 and 2023, as shown below.

::: panel-tabset
### Total trade value

```{r}
#| ecoho: false
#| fig-height: 6

import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)


import_long <- import_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Import_Value") %>%
  mutate(Year = as.integer(Year),
         Import_Value = as.numeric(Import_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

export_long <- export_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Export_Value") %>%
  mutate(Year = as.integer(Year),
         Export_Value = as.numeric(Export_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

# combine Import and Export 
trade_2023 <- import_long %>%
  left_join(export_long, by = c("Data Series", "Year")) %>%
  mutate(Total_Trade = Import_Value + Export_Value) %>%
  filter(`Data Series` %in% top_10_partners_2023) %>% 
  group_by(`Data Series`, Year) %>%
  summarise(Total_Trade = round(sum(Total_Trade, na.rm = TRUE) / 1000, 1), .groups = "drop") %>%  
  ungroup() %>%
  mutate(Year = factor(Year, levels = c(2019, 2023))) 

# Slope Graph
newggslopegraph(trade_2023, Year, Total_Trade, `Data Series`,
  Title = "Top Trade Partners (2019 vs 2023)",
  SubTitle = "Comparison of Top Trade Countries in 2023 (in Billion SGD)",
  Caption = "Data Source: Imports and Exports of Services by Major Trading Partner") +
  theme_minimal()

```

```{r}
#| ecoho: false
#| fig-height: 5

import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)

# long format, filter 2019, 2023 
import_long <- import_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Import_Value") %>%
  mutate(Year = as.integer(Year),
         Import_Value = as.numeric(Import_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

export_long <- export_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Export_Value") %>%
  mutate(Year = as.integer(Year),
         Export_Value = as.numeric(Export_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

# Import 
import_summary <- import_long %>%
  filter(`Data Series` %in% top_10_partners_2023) %>% 
  group_by(`Data Series`, Year) %>%
  summarise(Total_Import = round(sum(Import_Value, na.rm = TRUE) / 1000, 1), .groups = "drop") %>%  
  ungroup() %>%
  mutate(Year = factor(Year, levels = c(2019, 2023))) 

# Import Slope Graph
import_plot <- newggslopegraph(import_summary, Year, Total_Import, `Data Series`,
  Title = "Top Importing Partners (2019 vs 2023)",
  SubTitle = "Comparison of Top Trade Countries in 2023 (in Billion SGD)",
  Caption = "Data Source: Imports of Services by Major Trading Partner") +
  theme_minimal()

# Export 
export_summary <- export_long %>%
  filter(`Data Series` %in% top_10_partners_2023) %>% 
  group_by(`Data Series`, Year) %>%
  summarise(Total_Export = round(sum(Export_Value, na.rm = TRUE) / 1000, 1), .groups = "drop") %>% 
  ungroup() %>%
  mutate(Year = factor(Year, levels = c(2019, 2023))) 

# Export Slope Graph
export_plot <- newggslopegraph(export_summary, Year, Total_Export, `Data Series`,
  Title = "Top Exporting Partners (2019 vs 2023)",
  SubTitle = "Comparison of Top Trade Countries in 2023 (in Billion SGD)",
  Caption = "Data Source: Exports of Services by Major Trading Partner") +
  theme_minimal()

```

### Import

```{r}
#| ecoho: false
#| fig-height: 6
import_plot
```

### Export

```{r}
#| ecoho: false
#| fig-height: 6
export_plot
```
:::

## Part 2. Time-Series Analysis

#### Data preprocession(Merchandise trade data)


```{r}
import_m <- read_excel("data/trade.xlsx", sheet = "T1", range = "A11:JF171" )
export_m <- read_excel("data/trade.xlsx", sheet = "T2", range = "A11:JF171")
re_export_m <- read_excel("data/trade.xlsx", sheet = "T3", range = "A11:JF171")
```


Next, we transform, reshape, and merge import, export, and re-export trade data into a structured format with date-based indexing, ensuring completeness by filling missing values and calculating total trade values. Finally, generate a new data set "trade_data" for further time series analysis.
```{r}
library(dplyr)
library(tidyr)
library(tsibble)
library(lubridate)

# 確保 Month_Year 格式是 "Jan 2025"
import_long <- import_m %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Import_Value") %>%
  mutate(Date = yearmonth(Month_Year)) %>%  # ✅ 轉換成 yearmonth()
  select(`Data Series`, Date, Import_Value)

# 同樣方式轉換 Export 和 Re-Export 數據
export_long <- export_m %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Export_Value") %>%
  mutate(Date = yearmonth(Month_Year)) %>%
  select(`Data Series`, Date, Export_Value)

re_export_long <- re_export_m %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Re_Export_Value") %>%
  mutate(Date = yearmonth(Month_Year)) %>%
  select(`Data Series`, Date, Re_Export_Value)

# 合併數據
trade_data <- import_long %>%
  full_join(export_long, by = c("Data Series", "Date")) %>%
  full_join(re_export_long, by = c("Data Series", "Date")) %>%
  mutate(
    Import_Value = replace_na(Import_Value, 0),
    Export_Value = replace_na(Export_Value, 0),
    Re_Export_Value = replace_na(Re_Export_Value, 0),
    Total_Export_Value = Export_Value + Re_Export_Value,
    Total_Trade = Import_Value + Total_Export_Value,
    # 轉換單位：從 Million 轉成 Billion
    Import_Value = Import_Value / 1000,
    Export_Value = Export_Value / 1000,
    Re_Export_Value = Re_Export_Value / 1000,
    Total_Export_Value = Total_Export_Value / 1000,
    Total_Trade = Total_Trade / 1000
  )

# 轉換成 tsibble，確保時間序列不產生 gap
trade_ts <- trade_data %>%
  as_tsibble(index = Date, key = `Data Series`)

# 檢查是否仍有 gap
has_gaps(trade_ts)


```
```{r}
head(trade_ts)
```




Visiualising time series data, select top 10 countries from total trade value of 2023.
```{r}

# 選取 2023 年的數據，並找出前 10 大貿易國家
top_10_countries_2023 <- trade_ts %>%
  filter(year(Date) == 2023, 
         !(`Data Series` %in% c("Total All Markets", "America", "Asia", "Oceania"))) %>%  # 排除這些總類
  distinct(`Data Series`, Date, .keep_all = TRUE) %>%  # 確保唯一性
  group_by(`Data Series`) %>%
  summarise(Total_Trade_Sum = sum(Total_Trade, na.rm = TRUE)) %>%
  arrange(desc(Total_Trade_Sum)) %>%
  slice_head(n = 10) %>%
  pull(`Data Series`)  # 取得前10大國家名稱


# 定義前 10 大貿易國家
top_10_countries_2023 <- c("China", "Europe", "United States", "Malaysia", "Taiwan", "Hong Kong", "Indonesia", "Korea, Rep Of", "Japan", "Thailand")

# 過濾出這些國家的時間序列數據
trade_top10 <- trade_ts %>%
  filter(`Data Series` %in% top_10_countries_2023) %>%
  as_tsibble(index = Date, key = `Data Series`)  # 確保 tsibble 格式

# 確保數據沒有間隙
trade_top10 <- trade_top10 %>%
  fill_gaps()

# 訓練 ARIMA 模型
trade_forecast <- trade_top10 %>%
  model(ARIMA(Total_Trade)) %>%
  forecast(h = "6 months")  # 預測未來 6 個月

# 合併歷史數據和預測數據
p_forecast <- autoplot(trade_forecast, trade_top10, level = 95) +
  labs(title = "6-Month Forecast of Total Trade for Top 10 Trading Partners",
       x = "Year",
       y = "Total Trade Value") +
  theme_minimal() +
  scale_color_manual(values = c("black", "blue")) # 黑色代表歷史數據，紅色代表預測數據

# 轉為互動式圖表
ggplotly(p_forecast)



```



```{r}
print(top_10_countries_2023)
```


```{r}
p <- trade_top10 %>%
  filter(`Data Series` == "United States" |
         `Data Series` == "China"|
         `Data Series` == "Europe"|
         `Data Series` == "Malaysia"|
         `Data Series` == "Taiwan"|
         `Data Series` == "Hong Kong") %>% 
  autoplot(Total_Trade) + 
  facet_grid(`Data Series` ~ ., scales = "free_y") +
  labs(title = "Total Trade Trends in Billion SGD",
       x = "Year",
       y = "Total Trade Value (Billion SGD)") 
ggplotly(p)
```
```{r}

trade_ts %>%
  filter(`Data Series` == "United States" ) %>%
  gg_tsdisplay(Total_Trade)
```
```{r}

trade_ts %>%
  filter(`Data Series` == "China" ) %>%
  gg_tsdisplay(Total_Trade)
```


