---
title: "Take-home Exercise 2"
author: "Chang Fang Yu"
date-modified: "last-modified"
execute:
  echo: False
  eval: True
  warning: false
  freeze: true
---

# Time Series Data Optimization and Visualization - Singapore's International Trade

In this exercise, there are 2 components to illustrate the visiualization by R packages. In part 1, I choose 3 infographics to enhance the visualization for better clarity and understanding from Singapore Department of Statistics. (n.d.). *Singapore international trade*. Retrieved from <https://www.singstat.gov.sg/modules/infographics/singapore-international-trade>. 
In part 2, I select the "Merchandise Trade by Region/Market" dataset to perform time series analysis.

The data source of the two components is from Singstat, specifically "Merchandise Trade by Region/Market", and "International Trade in Services".

## Part 1. Infographic Makeover

### Topic 1: [TOTAL MERCHANDISE TRADE AT CURRENT PRICES, 2020 - 2024](https://www.singstat.gov.sg/modules/infographics/singapore-international-trade)

![TOTAL MERCHANDISE TRADE AT CURRENT PRICES, 2020 - 2024](images/01.png)

The infographic effectively aligns its visual design with the trade theme, creating a clear and engaging presentation. The use of distinct colors helps differentiate between different years at a glance, while concise data labels and the inclusion of numeric values enhance readability. 
However, there are areas for improvement. The lack of interactivity prevents users from exploring specific data points, and the overall trend of total trade value is not clearly presented. 
In the makeover, interactivity will be incorporated to allow users to engage with the data dynamically. Additionally, improvements will be made to better highlight the overall trade trends, making it easier to capture long-term patterns and observe any seasonal variations between different months.

#### Load the R packages and import data

The dataset for this topic include 3 table:

-   Merchandise Trade By Region And Selected Market (Imports), Monthly:\
    named as "import_m" in the following analysis

-   Merchandise Trade By Region And Selected Market (Domestic Exports), Monthly: named as "export_m"

-   Merchandise Trade By Region And Selected Market (Re-Exports), Monthly: named as "re_export_m"

```{r}
pacman::p_load(plotly, dplyr, scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse, CGPfunctions, tsibble, feasts, fable, seasonal)
```

```{r}
import_m <- read_excel("data/trade.xlsx", sheet = "T1", skip = 10)
export_m <- read_excel("data/trade.xlsx", sheet = "T2", skip = 10)
re_export_m <- read_excel("data/trade.xlsx", sheet = "T3", skip = 10)

```

#### Data Set for Topic 1, 2

::: panel-tabset
### Import(Merchandise)

```{r}

kable(head(import_m))
```

### Export(Merchandise)

```{R}
kable(head(export_m))
```

### Re-Export(Merchandise)

```{r}
kable(head(re_export_m))

```
:::

#### Data Pre-processing

The original infographic represents "Export" as a combination of both export and re-export from the raw dataset. Therefore, in this step, we combine these two data sets to calculate Total Export, ensuring consistency with the original representation. Additionally, we derive the Month and Year columns for further analysis.

```{r}
#import(merchandise)

import_m_long <- import_m %>%
    pivot_longer(cols = -`Data Series`,  
                 names_to = "Month_Year", 
                 values_to = "Value") %>%
    mutate(
        Year = as.numeric(sub(" .*", "", Month_Year)),  
        Month = factor(sub("^[0-9]+ ", "", Month_Year), 
                       levels = month.abb,  
                       ordered = TRUE)
    ) %>%
    select(`Data Series`, Year, Month, Value)  

```

```{R}

#  Long Format
export_m_long <- export_m %>%
    pivot_longer(cols = -`Data Series`,
                 names_to = "Month_Year",
                 values_to = "Export_Value")

re_export_m_long <- re_export_m %>%
    pivot_longer(cols = -`Data Series`,
                 names_to = "Month_Year",
                 values_to = "Re_Export_Value")

# combine Export and Re-Export 
total_export_m <- left_join(export_m_long, re_export_m_long, 
                            by = c("Data Series", "Month_Year")) %>%
    mutate(Total_Export_Value = Export_Value + Re_Export_Value) %>%
    select(`Data Series`, Month_Year, Total_Export_Value)

# Derive Year and Month
total_export_m <- total_export_m %>%
    mutate(
        Year = as.numeric(sub(" .*", "", Month_Year)),
        Month = factor(sub("^[0-9]+ ", "", Month_Year), levels = month.abb, ordered = TRUE)
    ) %>%
    select(`Data Series`, Year, Month, Total_Export_Value)

```

#### Makeover Plot

::: panel-tabset
### Plot 1

```{r}
#| ecoho: false


filtered_import <- import_m_long %>%
  filter(`Data Series` == "Total All Markets", Year >= 2020 & Year <= 2024)

filtered_export <- total_export_m %>%
  filter(`Data Series` == "Total All Markets", Year >= 2020 & Year <= 2024)


combined_data <- filtered_import %>%
  rename(Import_Value = Value) %>%
  left_join(filtered_export %>% rename(Total_Export_Value = Total_Export_Value), by = c("Year", "Month")) %>%
  mutate(
    Import_Value = Import_Value/1000 ,                 
    Total_Export_Value = Total_Export_Value/1000,   
    Total_trade = (Import_Value + Total_Export_Value),    
  ) %>%
  pivot_longer(cols = c(Import_Value, Total_Export_Value, Total_trade), names_to = "Type", values_to = "Value")


average_values <- combined_data %>%
  group_by(Type, Month) %>%
  summarise(AvgValue = mean(Value, na.rm = TRUE), .groups = "drop")


p <- ggplot(combined_data, aes(x = Year, y = Value, group = Type, color = Type)) +
  geom_line(size = 0.8) +  
  geom_point(size = 1) +  
  geom_hline(data = average_values, aes(yintercept = AvgValue), linetype = "dotted", size = 0.3) +  
  facet_wrap(~Month, nrow = 1) +  
  scale_color_manual(values = c("Import_Value" = "blue", "Total_Export_Value" = "green", "Total_trade" = "orange")) +  
  labs(title = "TOTAL MERCHANDISE TRADE(2020-2024)",
       x = "", 
       y = "Trade Value ($S Bil)") +  
  theme_minimal() +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7),
        strip.text = element_text(size = 10, face = "bold"),
        legend.position = "none")  

ggplotly(p)

```

### Plot 2

```{r}
#| ecoho: false


annual_total <- combined_data %>%
  mutate(Value = Value) %>%  # 確保轉換
  group_by(Year, Type) %>%
  summarise(TotalValue = sum(Value, na.rm = TRUE), .groups = "drop")


p_annual <- ggplot(annual_total, aes(x = Year, y = TotalValue, group = Type, color = Type)) +
  geom_line(size = 1) +  
  geom_point(size = 1.2) +  
  scale_color_manual(values = c("Import_Value" = "blue", "Total_Export_Value" = "green", "Total_trade" = "orange")) +  
  labs(title = "Total Merchandise Trade Value (2020-2024)",
       x = "Year", 
       y = "Total Trade Value ($S Bil)") +  
  theme_minimal() +  
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        legend.position = "bottom")  

ggplotly(p_annual)

```



:::

The first plot of total merchandise trade in Singapore reveals a seasonal trend, with fluctuations in certain months. Trade volume typically declines in January and February, before surging to its highest point in March. This pattern suggests a seasonal impact on trade volume, possibly influenced by economic cycles or festive periods.

The second plot illustrates the annual total trade value. From 2020 to 2022, both imports and exports experienced steady growth, followed by a slight dip in 2023. However, 2024 shows signs of recovery, indicating resilience in Singapore’s trade performance.

### Topic 2: MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS, 2024

![MERCHANDISE TRADE PERFORMANCE WITH MAJOR TRADING PARTNERS, 2024](images/02-01.png)

The infographic effectively utilizes different colors to label each country’s merchandise trade value, making it easy to interpret. The varying sizes of the circles visually illustrate the trade volume, allowing users to compare different countries at a glance. Additionally, the smart use of background colors helps differentiate between trade surplus and deficit, adding an important layer of insight to the data. 
However, one key area for improvement is the lack of interactivity, which limits user engagement. 
In the makeover, interactivity will be incorporated to enable users to explore the data dynamically, enhancing engagement and providing a more immersive analytical experience.

#### Makeover Plot

```{r}
#| ecoho: false

import_2024 <- import_m %>%
  select(`Data Series`, contains("2024")) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Import_Value") %>%
  group_by(`Data Series`) %>%
  summarise(Import_Value = sum(Import_Value, na.rm = TRUE), .groups = "drop")

export_2024 <- export_m %>%
  select(`Data Series`, contains("2024")) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Export_Value") %>%
  group_by(`Data Series`) %>%
  summarise(Export_Value = sum(Export_Value, na.rm = TRUE), .groups = "drop")

re_export_2024 <- re_export_m %>%
  select(`Data Series`, contains("2024")) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Re_Export_Value") %>%
  group_by(`Data Series`) %>%
  summarise(Re_Export_Value = sum(Re_Export_Value, na.rm = TRUE), .groups = "drop")


trade_2024 <- import_2024 %>%
  left_join(export_2024, by = "Data Series") %>%
  left_join(re_export_2024, by = "Data Series") %>%
  mutate(
    Import_Value = Import_Value / 1000, 
    Export_Value = Export_Value / 1000,   
    Re_Export_Value = Re_Export_Value / 1000, 
    Total_Export_Value = (Export_Value + Re_Export_Value), 
    Total_Trade = (Import_Value + Total_Export_Value)
  ) %>%
  filter(!`Data Series` %in% c("Total All Markets", "Asia", "America", "Oceania")) %>%
  arrange(desc(Total_Trade)) %>%  
  slice(1:10)


max_value <- max(trade_2024$Total_Export_Value, trade_2024$Import_Value, na.rm = TRUE)

p <- ggplot(trade_2024, aes(x = Total_Export_Value, y = Import_Value, size = Total_Trade, fill = `Data Series`)) +
  

  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  

  annotate("polygon", 
         x = c(0, max_value, 0), 
         y = c(0, max_value, max_value), 
         fill = "lightblue", alpha = 0.2) +

  geom_point(shape = 21, alpha = 0.8, color = "white") +
  scale_size(range = c(3, 15)) +

  labs(title = "Merchandise Trade Performance 
       with Top Trading Partners (2024)",
       x = "Exports (S$ Bil)",
       y = "Imports (S$ Bil)",
       size = "Total Trade (S$ Bil)",
       fill = "Country") +


  theme_minimal() +
  theme(legend.position = "bottom",
        plot.caption = element_text(hjust = 0, size = 8, face = "bold", color = "gray30"))

ggplotly(p, tooltip = c("x", "y", "size", "fill"))

```
In this makeover graphic, the dynamic tooltip provides an engaging interaction for users. We can observe that there are six key trade partners—the United States, Taiwan, South Korea, Japan, and the European Union—where Singapore experiences a trade deficit.
On the other hand, China, Hong Kong, Indonesia, and Thailand are trade surplus partners, indicating that Singapore exports more to these countries than it imports. Meanwhile, Malaysia maintains a balanced trade relationship with Singapore, as its import and export values are nearly equal.

### Topic 3: MAJOR TRADING PARTNERS FOR TRADE IN SERVICES, 2023

![MAJOR TRADING PARTNERS FOR TRADE IN SERVICES, 2023](images/03.png)

The infographic clearly presents the ranking of different trade partners, making it easy to compare their positions. The inclusion of trade data from both 2023 and 2019 helps illustrate trends over time. However, the lack of context and the absence of total trade values for each country make it harder to grasp the overall trade volume.

The makeover plot will utilize a slope graph to more effectively highlight trade patterns over time and showcase how different trade partners have changed across the years with interativity.

#### Data Set for Topic 3

::: panel-tabset
### Import(services)

```{R}
import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
kable(head(import_s))
```

### Export(services)

```{R}
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)
kable(head(export_s))
```
:::

#### Create a top 10 trade partners list from 2023

```{r}


import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)


import_long <- import_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Import_Value") %>%
  mutate(Year = as.integer(Year), 
         Import_Value = as.numeric(Import_Value)) %>%
  filter(Year == 2023 & !`Data Series` %in% c("Asia", "Europe", "North America", "Oceania", "South And Central America And The Caribbean", "America" ))

export_long <- export_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Export_Value") %>%
  mutate(Year = as.integer(Year), 
         Export_Value = as.numeric(Export_Value)) %>%
  filter(Year == 2023 & !`Data Series` %in% c("Asia", "Europe", "North America", "Oceania", "South And Central America And The Caribbean"  ))


trade_2023 <- import_long %>%
  full_join(export_long, by = "Data Series") %>%
  mutate(
    Import_Value = replace_na(Import_Value, 0),  
    Export_Value = replace_na(Export_Value, 0),
    Total_Trade = Import_Value + Export_Value   
  )


top_10_partners_2023 <- trade_2023 %>%
  arrange(desc(Total_Trade)) %>%
  slice_head(n = 10) %>%
  pull(`Data Series`)

print(top_10_partners_2023)

```

#### Plot slope graphs

Next, we will use the list of the top 10 trading partners in 2023 to create a slope graph comparing 2019 and 2023. The graph will be interactive, allowing users to hover over a country to display a tooltip showing the total trade, import, and export values for that year. This presentation will be more concise and clearer than the original infographic.

```{r}
#| ecoho: false

import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)

import_long <- import_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Import_Value") %>%
  mutate(Year = as.integer(Year),
         Import_Value = as.numeric(Import_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

export_long <- export_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Export_Value") %>%
  mutate(Year = as.integer(Year),
         Export_Value = as.numeric(Export_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

# Combine Import and Export 
trade_2023 <- import_long %>%
  left_join(export_long, by = c("Data Series", "Year")) %>%
  mutate(Total_Trade = Import_Value + Export_Value) %>%
  filter(`Data Series` %in% top_10_partners_2023) %>% 
  group_by(`Data Series`, Year) %>%
  summarise(
    Import_Value = round(sum(Import_Value, na.rm = TRUE) / 1000, 1),
    Export_Value = round(sum(Export_Value, na.rm = TRUE) / 1000, 1),
    Total_Trade = round(sum(Total_Trade, na.rm = TRUE) / 1000, 1), .groups = "drop"
  ) %>%  
  ungroup() %>%
  mutate(Year = factor(Year, levels = c(2019, 2023))) 

# Slope Graph
trade_plot <- ggplot(trade_2023, aes(x = Year, y = Total_Trade, group = `Data Series`, text = paste(
    "Country: ", `Data Series`, "<br>",
    "Total Trade: ", Total_Trade, "B SGD<br>",
    "Import: ", Import_Value, "B SGD<br>",
    "Export: ", Export_Value, "B SGD"
  ))) +
  geom_line(aes(color = `Data Series`), size = 0.9) +
  geom_point(aes(color = `Data Series`), size = 1.3) +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Top Trade Partners (2019 vs 2023)",
    subtitle = "Comparison of Top Trade Countries in 2023 ($S Bil)",
    caption = "Data Source: Imports and Exports of Services by Major Trading Partner",
    x = NULL, y = "Total Trade (Billion SGD)"
  ) +
  theme_minimal() +
  theme(legend.position = "bottom")

trade_plotly <- ggplotly(trade_plot, tooltip = "text")

trade_plotly


```

From the interactive infographic, we can observe that the overall trend of trade partners has been increasing from 2019 to 2023. Obviously, the trade volume growth of the U.S. and EU-27 significantly outpaces that of other countries.

However, in the original infographic, India is listed as the 10th largest trade partner. However, in the 2023 trade volume ranking calculated from our data, India is not included, while Ireland is. This highlights an inconsistency in the analysis result.

If we use a static design for the slope graph, we would need three separate charts to compare total trade, export, and import between 2019 and 2023, as shown below.

::: panel-tabset
### Total trade value

```{r}
#| ecoho: false
#| fig-height: 6

import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)


import_long <- import_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Import_Value") %>%
  mutate(Year = as.integer(Year),
         Import_Value = as.numeric(Import_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

export_long <- export_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Export_Value") %>%
  mutate(Year = as.integer(Year),
         Export_Value = as.numeric(Export_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

# combine Import and Export 
trade_2023 <- import_long %>%
  left_join(export_long, by = c("Data Series", "Year")) %>%
  mutate(Total_Trade = Import_Value + Export_Value) %>%
  filter(`Data Series` %in% top_10_partners_2023) %>% 
  group_by(`Data Series`, Year) %>%
  summarise(Total_Trade = round(sum(Total_Trade, na.rm = TRUE) / 1000, 1), .groups = "drop") %>%  
  ungroup() %>%
  mutate(Year = factor(Year, levels = c(2019, 2023))) 

# Slope Graph
newggslopegraph(trade_2023, Year, Total_Trade, `Data Series`,
  Title = "Top Trade Partners (2019 vs 2023)",
  SubTitle = "Comparison of Top Trade Countries in 2023 ($S Bil)",
  Caption = "Data Source: Imports and Exports of Services by Major Trading Partner") +
  theme_minimal()

```

```{r}
#| ecoho: false
#| fig-height: 5

import_s <- read_excel("data/import_services.xlsx", sheet = "T1", skip = 10)
export_s <- read_excel("data/exports_services.xlsx", sheet = "T1", skip = 10)

# long format, filter 2019, 2023 
import_long <- import_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Import_Value") %>%
  mutate(Year = as.integer(Year),
         Import_Value = as.numeric(Import_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

export_long <- export_s %>%
  mutate(across(-`Data Series`, as.character)) %>%
  pivot_longer(cols = -`Data Series`, names_to = "Year", values_to = "Export_Value") %>%
  mutate(Year = as.integer(Year),
         Export_Value = as.numeric(Export_Value)) %>%
  filter(Year %in% c(2019, 2023)) 

# Import 
import_summary <- import_long %>%
  filter(`Data Series` %in% top_10_partners_2023) %>% 
  group_by(`Data Series`, Year) %>%
  summarise(Total_Import = round(sum(Import_Value, na.rm = TRUE) / 1000, 1), .groups = "drop") %>%  
  ungroup() %>%
  mutate(Year = factor(Year, levels = c(2019, 2023))) 

# Import Slope Graph
import_plot <- newggslopegraph(import_summary, Year, Total_Import, `Data Series`,
  Title = "Top Importing Partners in Services (2019 vs 2023)",
  SubTitle = "Comparison of Top Trade Countries in 2023 ($S Bil)",
  Caption = "Data Source: Imports of Services by Major Trading Partner") +
  theme_minimal()

# Export 
export_summary <- export_long %>%
  filter(`Data Series` %in% top_10_partners_2023) %>% 
  group_by(`Data Series`, Year) %>%
  summarise(Total_Export = round(sum(Export_Value, na.rm = TRUE) / 1000, 1), .groups = "drop") %>% 
  ungroup() %>%
  mutate(Year = factor(Year, levels = c(2019, 2023))) 

# Export Slope Graph
export_plot <- newggslopegraph(export_summary, Year, Total_Export, `Data Series`,
  Title = "Top Exporting Partners (2019 vs 2023)",
  SubTitle = "Comparison of Top Trade Countries in 2023 ($S Bil)",
  Caption = "Data Source: Exports of Services by Major Trading Partner") +
  theme_minimal()

```

### Import

```{r}
#| ecoho: false
#| fig-height: 6
import_plot
```

### Export

```{r}
#| ecoho: false
#| fig-height: 6
export_plot
```
:::

## Part 2. Time-Series Analysis

In this part, we will use the Merchandise trade data (including import, export, re-export) to perform time-series analysis.

#### Data Preprocessing

```{r}
import_m <- read_excel("data/trade.xlsx", sheet = "T1", range = "A11:JF171" )
export_m <- read_excel("data/trade.xlsx", sheet = "T2", range = "A11:JF171")
re_export_m <- read_excel("data/trade.xlsx", sheet = "T3", range = "A11:JF171")
```

To further analysis time series data, the first thing we need to do is to transform monthly import, export, and re-export data into a long format with a standardized "Month_Year" format,and merges them into a single dataset, fills missing values with zero, calculates total trade values, converts values from millions to billions, and ensures a continuous time series structure without gaps using a tsibble.

```{r}
library(dplyr)
library(tidyr)
library(tsibble)
library(lubridate)

# Transform the Month_Year to yearmonth()
import_long <- import_m %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Import_Value") %>%
  mutate(Date = yearmonth(Month_Year)) %>%  
  select(`Data Series`, Date, Import_Value)

export_long <- export_m %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Export_Value") %>%
  mutate(Date = yearmonth(Month_Year)) %>%
  select(`Data Series`, Date, Export_Value)

re_export_long <- re_export_m %>%
  pivot_longer(cols = -`Data Series`, names_to = "Month_Year", values_to = "Re_Export_Value") %>%
  mutate(Date = yearmonth(Month_Year)) %>%
  select(`Data Series`, Date, Re_Export_Value)

# Join 3 datasheet into one and convert the unit from million to billion
trade_data <- import_long %>%
  full_join(export_long, by = c("Data Series", "Date")) %>%
  full_join(re_export_long, by = c("Data Series", "Date")) %>%
  mutate(
    Import_Value = replace_na(Import_Value, 0),
    Export_Value = replace_na(Export_Value, 0),
    Re_Export_Value = replace_na(Re_Export_Value, 0),
    Total_Export_Value = Export_Value + Re_Export_Value,
    Total_Trade = Import_Value + Total_Export_Value,
    #  Million to Billion
    Import_Value = Import_Value / 1000,
    Export_Value = Export_Value / 1000,
    Re_Export_Value = Re_Export_Value / 1000,
    Total_Export_Value = Total_Export_Value / 1000,
    Total_Trade = Total_Trade / 1000
  )

# convert to tsibble 
trade_ts <- trade_data %>%
  as_tsibble(index = Date, key = `Data Series`)

# check if there is time gap
has_gaps(trade_ts)


```

After the preparation above, we get a new dataset: "trade_ts" Now the Date format is "yearmonth", and the unit of trade value is in billion SGD.

```{r}
head(trade_ts)
```

#### Select top 10 trade countries from total trade volumn of 2023
Next, We selects trade data for 2023, identifies the top 10 trading countries based on total trade value, filters the dataset for these countries, converts it into a time series tibble, and fills any missing time gaps.

```{r}

top_10_countries_2023 <- trade_ts %>%
  filter(year(Date) == 2023, 
         !(`Data Series` %in% c("Total All Markets", "America", "Asia", "Oceania"))) %>% 
  distinct(`Data Series`, Date, .keep_all = TRUE) %>%  
  group_by(`Data Series`) %>%
  summarise(Total_Trade_Sum = sum(Total_Trade, na.rm = TRUE)) %>%
  arrange(desc(Total_Trade_Sum)) %>%
  slice_head(n = 10) %>%
  pull(`Data Series`)  

top_10_countries_2023 <- c("China", "Europe", "United States", "Malaysia", "Taiwan", "Hong Kong", "Indonesia", "Korea, Rep Of", "Japan", "Thailand")

trade_top10 <- trade_ts %>%
  filter(`Data Series` %in% top_10_countries_2023) %>%
  as_tsibble(index = Date, key = `Data Series`)  

trade_top10 <- trade_top10 %>%
  fill_gaps()

```

The top 10 countries in 2023:

```{r}
print(top_10_countries_2023)
```

#### Perform time series data visualization for selected countries
Next, we select six of the top country to visualize the time series data.

```{r}
p <- trade_top10 %>%
  filter(`Data Series` %in% c("United States", "China", "Europe", "Malaysia", "Taiwan", "Hong Kong")) %>%
  mutate(
    Country = case_when(  
      `Data Series` == "United States" ~ "USA",
      `Data Series` == "China" ~ "CHN",
      `Data Series` == "Europe" ~ "EU",
      `Data Series` == "Malaysia" ~ "MAS",
      `Data Series` == "Taiwan" ~ "TWN",
      `Data Series` == "Hong Kong" ~ "HKG",
      TRUE ~ `Data Series`
    )
  ) %>%
  ggplot(aes(x = Date, y = Total_Trade, color = Country, 
             text = paste("Country:", `Data Series`))) +  # In Tooltip show original data series name
  geom_line() + 
  facet_grid(Country ~ ., scales = "free_y", switch = "y") +  # Right bar show USA, CHN...
  labs(title = "Total Trade Trends of Selected Countries",
       x = "Year",
       y = "Total Trade Value ($S Bil)") +
  theme(
    strip.text.y = element_text(size = 8, face = "bold"),  
    panel.spacing = unit(1, "lines"),
    legend.position = "none",  
    axis.text.y = element_text(size = 5)  
  )

ggplotly(p, tooltip = c("x", "y", "text"))


```

Use "gg_season" to check if there is any seasonal pattern

```{r}
trade_top10 %>%
  filter(`Data Series` %in% c("United States", "Europe", "China", "Malaysia")) %>%
  gg_season(Total_Trade) +
  labs(title = "Seasonal Pattern of Total Trade for Selected Countries", 
       x = "Month",
       y = "Total Trade Value ($S Bil)") +
  theme(
    strip.text.y = element_text(size = 7, face = "bold"),
    plot.title = element_text(size = 11)
    )

```

From the seasonal plot, we can observe several peak in certain months, such as March and July. Next, we use composite plot and STL decomposition to analyze the trade trends of China and the United States.

### United States
::: panel-tabset
### Composite Plot

```{r}
trade_ts %>%
  filter(`Data Series` == "United States") %>%
  gg_tsdisplay(Total_Trade) +
  ggtitle("Total Trade Trend with the United States($S Bil)")
  

```
### STL
```{r}
p <- trade_ts %>%
  filter(`Data Series` == "United States") %>%
  model(stl = STL(Total_Trade)) %>%
  components() %>%
  autoplot() +
  ggtitle("STL Decomposition of Total Trade with the United States($S Bil)") +
  theme(
    strip.text.y = element_text(size = 7, face = "bold"),
    plot.title = element_text(size = 11)
    )
ggplotly(p)
```
:::

Insight: 

From the composite plot of the United States, we can observe that the overall trend of total trade between Singapore and the United States is upward (particularly after 2020). 
Nevertheless, there are fluctuations in the most recent years. The ACF plot shows strong autocorrelation at shorter lags, suggesting a persistent seasonal pattern or trend over time. 
The seasonality suggests that, in general, there are peaks in specific months such as March, July, August, and November.

In a similar pattern, the STL decomposition plot also suggests a long-term upward trend in trade volume. Moreover, there is a strong seasonal pattern with higher variation in recent years, indicating that specific months consistently experience higher or lower trade activity each year. 
The remainder component captures non-systematic variations, most likely resulting from unexpected events or economic disruptions. The fluctuations appear more volatile in recent years.

### China
::: panel-tabset
### Composite Plot
```{r}

trade_ts %>%
  filter(`Data Series` == "China") %>%
  gg_tsdisplay(Total_Trade) +
  ggtitle("Total Trade Trend with the China($S Bil)")
```
### STL
```{r}

p <- trade_ts %>%
  filter(`Data Series` == "China") %>%
  model(stl = STL(Total_Trade)) %>%
  components() %>%
  autoplot() +
  ggtitle("STL Decomposition of Total Trade with the China($S Bil)") +
  theme(
    strip.text.y = element_text(size = 7, face = "bold"),
    plot.title = element_text(size = 11)
    )
ggplotly(p)
```
```
:::
Insight:

Similarly with the United Stated, The total trade volume between Singapore and China also exhibit a lon-term upward trend, particularly after 2020. Moreover, strong seasonality patterns are shown in both cases, with peaks in March, July, August, and November. The ACF plots indicate high autocorrelation. Besides, the remainder component in STL decomposition suggests that hte trade market has experienced volatility in recent years for both countries.

The differences between the two countries can be observed: China shows a more gradual increase in trade volume, whereas the U.S. experiences more fluctuations. Besides, China's seasonality appears more consistent over time, whereas the U.S. shows a gradual increase in recent years.
Moreover, the remainder component indicates that trade activity with the U.S. exhibits a stronger reaction to disruptive events.


