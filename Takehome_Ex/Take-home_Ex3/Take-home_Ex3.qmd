---
title: "Take-home Exercise 3"
author: "Chang Fang Yu"
date-modified: "last-modified"
execute:
  echo: False
  eval: True
  warning: false
  freeze: true
---
# Prototype of Shiny app Module 1. Machine Learning Based Tender Clissification

```{r}
library(tidyverse)
library(tidytext)
library(topicmodels)
library(ggplot2)
library(cluster)
library(reshape2)
library(tm)
```

### Load Data

### Raw data
```{R}
GP <- read_csv("data/GovernmentProcurementviaGeBIZ.csv")
glimpse(GP)
colnames(GP)

```

There are 18638 rows and 7 columns in the GP data set.

```{R}
summary(GP)
```

### EDA

```{r}
# 1. 檢查欄位基本結構
str(GP)

# 2. 缺失值檢查
colSums(is.na(GP))      # 看每欄缺失幾筆
summary(GP$awarded_amt) # 這欄可能有 0 或 NA
```
```{r}

unique(GP$tender_detail_status)
```
```{R}
library(dplyr)
library(ggplot2)

GP %>%
  count(tender_detail_status) %>%
  ggplot(aes(x = tender_detail_status, y = n, fill = tender_detail_status)) +
  geom_bar(stat = "identity") +
  labs(title = "Tender Award Status Distribution",
       x = "Tender Status",
       y = "Number of Tenders") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set2") +  # 自動分配顏色給多類別
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```



### Data Cleaning
```{r}
library(dplyr)

Cleaned_GP <- GP %>%
  filter(tender_detail_status != "Awarded to No Suppliers")

```
Drop the "Awared to No Suppliers " date point.
Data set "Cleaned_GP" after clean


```{r}
Cleaned_GP
```
```{r}
library(dplyr)
library(ggplot2)
library(lubridate)

# 轉換日期格式
Cleaned_GP <- Cleaned_GP %>%
  mutate(award_date = lubridate::dmy(award_date)) %>%  # 或 mdy()，看你原本格式
  mutate(award_month = floor_date(award_date, unit = "month"))

# 彙總後移除 NA
monthly_amt <- Cleaned_GP %>%
  group_by(award_month) %>%
  summarise(total_awarded = sum(awarded_amt, na.rm = TRUE)) %>%
  tidyr::drop_na(total_awarded)

# 畫圖
ggplot(monthly_amt, aes(x = award_month, y = total_awarded)) +
  geom_line(color = "#1f77b4", size = 1) +
  geom_point(color = "#1f77b4") +
  scale_y_continuous(labels = scales::dollar_format(prefix = "$")) +
  labs(title = "Monthly Awarded Amount Distribution",
       x = "Award Month",
       y = "Total Awarded Amount") +
  theme_minimal()

```

`








Now let's do an prototype of module 1: creating an LDA classification by Tender_description.
### Text Cleaning-Set stop words 

```{r}
# 清理文本
stopwords_custom <- c("please", "refer", "another", "one", "two", "three", "framework", "edition", "related", "whole", "period", "government", "entities", "various", "including",
"requirement", "provide", "supply", "service", "procurement", "year", "option", "extend", "agreement", "singapore", "Singapore","one", "two", "three")

Cleaned_GP <- Cleaned_GP %>%
  mutate(
    tender_clean = tender_description %>%
      tolower() %>%
      removePunctuation() %>%
      removeNumbers() %>%
      stripWhitespace() %>%
      removeWords(stopwords("en")) %>%
      removeWords(stopwords_custom)
  )
```

## LDA Topic Modeling
Set k=7

```{r}
dtm <- Cleaned_GP %>%
  unnest_tokens(word, tender_clean) %>%
  count(tender_no, word) %>%
  cast_dtm(document = tender_no, term = word, value = n)

lda_model <- LDA(dtm, k = 7, control = list(seed = 1234))
lda_results <- tidy(lda_model, matrix = "beta")
```

## Document-Topic Probability Matrix

```{r}
doc_topic_matrix <- tidy(lda_model, matrix = "gamma") %>%
  spread(topic, gamma)
```

## K-means Clustering on Document-Topic Distributions

```{r}
k_clusters <- 6
set.seed(1234)
kmeans_result <- kmeans(doc_topic_matrix[,-1], centers = k_clusters)
doc_topic_matrix$cluster <- factor(kmeans_result$cluster)
```

```{r}
head(doc_topic_matrix)
dim(doc_topic_matrix)  # 查看行數與列數

```

```{r}
library(reshape2)

doc_topic_melted <- melt(doc_topic_matrix, 
                          id.vars = c("document", "cluster"), 
                          variable.name = "Topic", 
                          value.name = "Probability")

# 檢查生成的數據
head(doc_topic_melted)
dim(doc_topic_melted)  # 查看數據是否有效

```

## Visualizing Topic Probabilities for Clusters

```{r}
library(ggplot2)

ggplot(doc_topic_melted, aes(x = Topic, y = Probability, group = document, color = cluster)) +
  geom_line(alpha = 0.2, size = 0.4)  +
  geom_smooth(aes(group = cluster), method = "loess", se = FALSE, size = 1, color = "black") +
  facet_wrap(~ cluster, scales = "free_y", nrow = 2) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10)
  ) +
  labs(title = "stLDA-C Topic Distributions by Cluster", x = "Topic", y = "Probability")

```

```{r}
top_terms <- tidy(lda_model, matrix = "beta") %>%
  group_by(topic) %>%
  top_n(10, beta) %>%
  arrange(topic, desc(beta))
print(top_terms)

```

```{r}
library(ggplot2)
library(plotly)

p <- ggplot(doc_topic_melted, aes(x = Topic, y = Probability, group = document, color = cluster)) +
  geom_line(alpha = 0.2, size = 0.4)  +
  geom_smooth(aes(group = cluster), method = "loess", se = FALSE, size = 1, color = "black") +
  facet_wrap(~ cluster, scales = "free_y", nrow = 2) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10)
  ) +
  labs(title = "stLDA-C Topic Distributions by Cluster", x = "Topic", y = "Probability")

# 轉為互動圖表
ggplotly(p)


```




