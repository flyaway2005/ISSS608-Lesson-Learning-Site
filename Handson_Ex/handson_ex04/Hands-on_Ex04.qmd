---
title: "Hands-on Exercise 4"
author: "Chang Fang Yu"
date-modified: "last-modified"
execute:
  echo: True
  eval: True
  warning: false
  freeze: true
---

# Visualising Distribution
## Getting Started
### Installing and loading the packages
```{R}
pacman::p_load(ggdist, ggridges, ggthemes,
               colorspace, tidyverse)

```
### Data import
```{R}
exam <- read_csv("data/Exam_data.csv")
```
## Visualising Distribution with Ridgeline Plot
### Plotting ridgeline graph: ggridges method
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("#7097BB", .3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
    ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```
:::
### Varying fill colors along the x axis
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(exam, 
       aes(x = ENGLISH, 
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                       option = "C") +
  scale_x_continuous(
    name = "English grades",
    expand = c(0, 0)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```
:::
###  Mapping the probabilities directly onto colour
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability",
                       direction = -1) +
  theme_ridges()
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient", 
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail probability",
                       direction = -1) +
  theme_ridges()
```
:::
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = 4,
    quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges()
```
:::
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(exam,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile))
           )) +
  stat_density_ridges(
    geom = "density_ridges_gradient",
    calc_ecdf = TRUE, 
    quantiles = c(0.025, 0.975)
    ) +
  scale_fill_manual(
    name = "Probability",
    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()
```
:::
## Visualising Distribution with Raincloud Plot
### Plotting a Half Eye graph
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)
```
:::
### Adding the boxplot with geom_boxplot()
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)
```
:::
### Adding the Dot Plots with stat_dots()
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)
```
:::
### Finishing touch
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  coord_flip() +
  theme_economist()
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  coord_flip() +
  theme_economist()
```
:::
# Visual Statistical Analysis with ggstatsplot
## Getting Started
### Installing and launching R packages
```{R}
pacman::p_load(ggstatsplot, tidyverse, qqplotr)
```
### Importing data
```{R}
exam <- read_csv("data/Exam_data.csv")
```
## One-sample test: gghistostats() method
```{R}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)

```
## Two-sample mean test: ggbetweenstats()
```{R}
ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```
## Oneway ANOVA Test: ggbetweenstats() method
```{R}
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```
###  Significant Test of Correlation: ggscatterstats()
```{R}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```
### Significant Test of Association (Depedence) : ggbarstats() methods
```{R}
exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
ggbarstats(exam1, 
           x = MATHS_bins, 
           y = GENDER)
```
# Visualising Models
## Getting Started
```{R}
pacman::p_load(readxl, performance, parameters, see)
```
### Importing Excel file: readxl methods
```{R}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```
###  Multiple Regression Model using lm()
```{R}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```
### Model Diagnostic: checking for multicolinearity:
```{R}
check_collinearity(model)
check_c <- check_collinearity(model)
plot(check_c)
```
### Model Diagnostic: checking normality assumption
```{R}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)
check_n <- check_normality(model1)
plot(check_n)
```
### Model Diagnostic: Check model for homogeneity of variances
```{R}
check_h <- check_heteroscedasticity(model1)
plot(check_h)
```
### Model Diagnostic: Complete check
```{R}
check_model(model1)
```
### Visualising Regression Parameters: see methods
```{R}
plot(parameters(model1))
```
###  Visualising Regression Parameters: ggcoefstats() methods
```{R}
ggcoefstats(model1, 
            output = "plot")
```
# Visualising Uncertainty
## Getting Started
### Installing and loading the packages
```{R}
pacman::p_load(plotly, crosstalk, DT, 
               ggdist, ggridges, colorspace,
               gganimate, tidyverse)
```
### Data import
```{R}
exam <- read_csv("data/Exam_data.csv")
```
## Visualizing the uncertainty of point estimates: ggplot2 methods
```{R}
my_sum <- exam %>%
  group_by(RACE) %>%
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
knitr::kable(head(my_sum), format = 'html')
```


### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
knitr::kable(head(my_sum), format = 'html')
```
:::
### Plotting standard error bars of point estimates
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean maths score by rac")
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean maths score by rac")
```
:::
### Plotting confidence interval of point estimates
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Maths score",
       title = "95% confidence interval of mean maths score by race")
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
ggplot(my_sum) +
  geom_errorbar(
    aes(x=reorder(RACE, -mean), 
        ymin=mean-1.96*se, 
        ymax=mean+1.96*se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    linewidth=0.5) +
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  labs(x = "Maths score",
       title = "95% confidence interval of mean maths score by race")
```
:::
###  Visualizing the uncertainty of point estimates with interactive error bars
::: panel-tabset
### The plot
```{R}
#| echo: false
#| message: false
#| warning: false
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(RACE, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="black", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=RACE, 
                     y=mean, 
                     text = paste("Race:", `RACE`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Scores:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("Race") + 
                   ylab("Average Scores") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>maths scores by race")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of pupils", 
                                  "Avg Scores",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```
### The code
```{R}
#| echo: true
#| message: false
#| warning: false
#| fig.show: "hide"
shared_df = SharedData$new(my_sum)

bscols(widths = c(4,8),
       ggplotly((ggplot(shared_df) +
                   geom_errorbar(aes(
                     x=reorder(RACE, -mean),
                     ymin=mean-2.58*se, 
                     ymax=mean+2.58*se), 
                     width=0.2, 
                     colour="black", 
                     alpha=0.9, 
                     size=0.5) +
                   geom_point(aes(
                     x=RACE, 
                     y=mean, 
                     text = paste("Race:", `RACE`, 
                                  "<br>N:", `n`,
                                  "<br>Avg. Scores:", round(mean, digits = 2),
                                  "<br>95% CI:[", 
                                  round((mean-2.58*se), digits = 2), ",",
                                  round((mean+2.58*se), digits = 2),"]")),
                     stat="identity", 
                     color="red", 
                     size = 1.5, 
                     alpha=1) + 
                   xlab("Race") + 
                   ylab("Average Scores") + 
                   theme_minimal() + 
                   theme(axis.text.x = element_text(
                     angle = 45, vjust = 0.5, hjust=1)) +
                   ggtitle("99% Confidence interval of average /<br>maths scores by race")), 
                tooltip = "text"), 
       DT::datatable(shared_df, 
                     rownames = FALSE, 
                     class="compact", 
                     width="100%", 
                     options = list(pageLength = 10,
                                    scrollX=T), 
                     colnames = c("No. of pupils", 
                                  "Avg Scores",
                                  "Std Dev",
                                  "Std Error")) %>%
         formatRound(columns=c('mean', 'sd', 'se'),
                     digits=2))
```
:::
## Visualising Uncertainty: ggdist package
### Visualizing the uncertainty of point estimates: ggdist methods
```{R}
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval() +
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")
```
```{R}
exam %>%
  ggplot(aes(x = RACE, y = MATHS)) +
  stat_pointinterval(.width = 0.95,
  .point = median,
  .interval = qi) +
  labs(
    title = "Visualising confidence intervals of median math score",
    subtitle = "Median Point + Multiple-interval plot")

```
### Visualizing the uncertainty of point estimates: ggdist methods
```{R}
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_pointinterval(
    show.legend = FALSE) +   
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Mean Point + Multiple-interval plot")
```
### Visualizing the uncertainty of point estimates: ggdist methods
```{R}
exam %>%
  ggplot(aes(x = RACE, 
             y = MATHS)) +
  stat_gradientinterval(   
    fill = "skyblue",      
    show.legend = TRUE     
  ) +                        
  labs(
    title = "Visualising confidence intervals of mean math score",
    subtitle = "Gradient + interval plot")
```
## Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)
```{R}
devtools::install_github("wilkelab/ungeviz")
```
## Visualising Uncertainty with Hypothetical Outcome Plots (HOPs)
```{R}
set.seed(123) 

summary_data <- exam %>%
  group_by(RACE) %>%
  summarize(yintercept = mean(MATHS))

ggplot(data = exam, aes(x = factor(RACE), y = MATHS)) +
  geom_point(position = position_jitter(height = 0.3, width = 0.05),
             size = 0.4, color = "#0072B2", alpha = 1/2) +
  geom_hline(data = summary_data, aes(yintercept = yintercept, group = RACE),
             color = "#D55E00", size = 1) +
  theme_bw() +
  transition_states(RACE, transition_length = 1, state_length = 3)
```